@model Melodie.Models.User

@{
	ViewBag.NoHeader = true;
	
	var errors = ViewBag.RegisterError ?? new Dictionary<string, string>();
}

<div class="auth-container">
	<div class="auth-left-container auth-img">
		<img src="/images/register_img.png" alt=""/>
	</div>
	
	<div class="auth-right-container auth-box">
		<div class="auth-title">
			<h2>Inscription</h2>
			<span>&Agrave; un monde rempli de musique.</span>
		</div>
		
		@if (errors.Count > 0)
		{
			<div class="auth-errors">
				<ol>
					@foreach (KeyValuePair<string, string> error in errors)
					{
						<li>@error.Value</li>
					}
				</ol>
			</div>
		}
		
		@using (Html.BeginForm("AddUser", "User", FormMethod.Post))
		{
			@Html.AntiForgeryToken()

			<span class="field @(errors.ContainsKey("InvalidUsername") ? "red" : "white" ) field-madoka">
				@Html.EditorFor(u => u.Username, new {htmlAttributes = new {id = "username", @class = "field-input", placeholder = " ", @required = "required"}})
				<label class="field-label" for="username">
					<svg class="field-graphic" width="100%" height="100%" viewBox="0 0 404 77" preserveAspectRatio="none">
						<path d="m0,0l404,0l0,77l-404,0l0,-77z"/>
					</svg>
					<span class="field-label-content">Nom d'utilisateur</span>
				</label>
			</span>

			<span class="field @(errors.ContainsKey("InvalidEmail") ? "red" : "white" ) field-madoka">
				@Html.EditorFor(u => u.EmailAddress, new {htmlAttributes = new {id = "email", @class = "field-input", placeholder = " "}})
				<label class="field-label" for="email">
					<svg class="field-graphic" width="100%" height="100%" viewBox="0 0 404 77" preserveAspectRatio="none">
						<path d="m0,0l404,0l0,77l-404,0l0,-77z"/>
					</svg>
					<span class="field-label-content">Email</span>
				</label>
			</span>

			<span class="field @(errors.ContainsKey("PasswordsDontMatch") || errors.ContainsKey("InvalidPassword") ? "red" : "white" ) field-madoka">
				@Html.EditorFor(u => u.Password, new {htmlAttributes = new {id = "password1", @class = "field-input", placeholder = " ", @required = "required"}})
				<label class="field-label" for="password1">
					<svg class="field-graphic" width="100%" height="100%" viewBox="0 0 404 77" preserveAspectRatio="none">
						<path d="m0,0l404,0l0,77l-404,0l0,-77z"/>
					</svg>
					<span class="field-label-content">Mot de passe</span>
				</label>
			</span>

			<span class="field @(errors.ContainsKey("PasswordsDontMatch") || errors.ContainsKey("InvalidPassword") ? "red" : "white" ) field-madoka">
				@Html.EditorFor(u => u.PasswordConfirmation, new {htmlAttributes = new {id = "password2", @class = "field-input", placeholder = " ", @required = "required"}})
				<label class="field-label" for="password2">
					<svg class="field-graphic" width="100%" height="100%" viewBox="0 0 404 77" preserveAspectRatio="none">
						<path d="m0,0l404,0l0,77l-404,0l0,-77z"/>
					</svg>
					<span class="field-label-content">Confirmer le mot de passe</span>
				</label>
			</span>

			<button class="btn yellow growing-circle" type="submit">
				<div class="btn-effect-box"></div>
				<span>S'inscrire</span>
			</button>
			
			<a id="have-an-account" asp-controller="User" asp-action="Login">J'ai d&eacute;j&agrave; un compte.</a>
		}
	</div>
</div>